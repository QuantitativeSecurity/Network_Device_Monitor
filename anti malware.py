import logging
import psutil
import socket
import time

logging.basicConfig(filename='log.txt', level=logging.DEBUG, format='%(asctime)s - %(message)s')

class Monitor:
    def __init__(self, resolution, refresh_rate):
        self.resolution = resolution
        self.refresh_rate = refresh_rate

    def display(self, image):

        logging.info("Displaying image on monitor with resolution %s and refresh rate %s", self.resolution, self.refresh_rate)
        logging.debug(image)

class Motherboard:
    def __init__(self):
        self.devices = {}
        self.router_ip = None
        self.sent_data = set()
        self.blocked_ips = set()
        self.sweep_counter = 1

    def connect(self, device, port):
        self.devices[port] = device
        device.connect(self, port)
        logging.info("%s connected to motherboard's %s port", device.__class__.__name__, port)

    def send_to_device(self, port, data):

        if port in self.devices:
            if data in self.sent_data:

                logging.warning("Outbound information with duplicate text '%s' detected. Check for potential security breaches.", data)


                conn = psutil.net_connections()
                for c in conn:
                    if c.status == "ESTABLISHED" and c.laddr.ip == self.router_ip and c.raddr.ip not in self.blocked_ips:

                        self.blocked_ips.add(c.raddr.ip)
                        logging.info("Blocked communication with IP address %s", c.raddr.ip)


                        with open("Blocked IPs.txt", "a") as f:
                            f.write(c.raddr.ip + "\n")


                        filename = "Info Sent-" + str(self.sweep_counter) + ".txt"
                        with open(filename, "a") as f:
                            f.write(data + "\n")


                        with open("Output Information.txt", "a") as f:
                            f.write("Data: {}\nPort: {}\nIP: {}\n\n".format(data, c.laddr.port, c.raddr.ip))

            else:
                self.sent_data.add(data)
                self.devices[port].receive_data(data)
                logging.debug("Data sent to %s connected to motherboard's %s port: %s",
                              self.devices[port].__class__.__name__, port, data)
        else:
            logging.warning("No device connected to motherboard's %s port", port)

    def receive_from_device(self, port, data):

        if port in self.devices:
            logging.debug("Data received from %s connected to motherboard's %s port: %s",
                          self.devices[port].__class__.__name__, port, data)

        else:
            logging.warning("No device connected to motherboard's %s port", port)

    def run(self):
        while True:

            net_connections = psutil.net_connections()
            for conn in net_connections:
                if conn.laddr.ip == "XXXX":

                    if conn.raddr.ip != self.router_ip:

                        logging.warning("External network connection detected with non-matching IP address. Program terminated.")
                        exit()


            new_router_ip = get_router_ip()
            if new_router_ip != self.router_ip:
                logging.info("Updated router IP address to %s", self.router_ip)


            if self.sent_data:
                duplicate_info = [data for data in self.sent_data if self.sent_data.count(data) > 1]
                if duplicate_info:
                    for info in duplicate_info:
                        filename = "Info Sent-" + str(self.sweep_counter) + ".txt"
                        with open(filename, "a") as f:
                            f.write(info + "\n")
                    self.sweep_counter += 1


            time.sleep(60)

class Device:
    def __init__(self):
        self.connected = False

    def connect(self, motherboard, port):
        self.motherboard = motherboard
        self.port = port
        self.connected = True

    def send_data(self, data):
        self.motherboard.send_to_device(self.port, data)

    def receive_data(self, data):
        self.motherboard.receive_from_device(self.port, data)

class Router(Device):
    def __init__(self):
        super().__init__()

    def send_data(self, data):

        conn = psutil.net_connections()
        for c in conn:
            if c.status == "ESTABLISHED" and c.laddr.ip == self.motherboard.router_ip and c.raddr.ip != self.motherboard.router_ip:
                self.motherboard.receive_from_device(self.port, data)
                logging.debug("Data received by router from device connected to motherboard's %s port: %s", self.port, data)
                break
        else:
            logging.warning("Inbound data rejected by router. No device connected to motherboard's %s port on LAN", self.port)

class Ethernet(Device):
    def __init__(self, mac_address):
        super().__init__()
        self.mac_address = mac_address

    def receive_data(self, data):

        logging.debug("Data received by Ethernet device with MAC address %s: %s", self.mac_address, data)
        self.motherboard.receive_from_device(self.port, data)

class WiFi(Device):
    def __init__(self, ssid, password):
        super().__init__()
        self.ssid = ssid
        self.password = password

    def receive_data(self, data):

        logging.debug("Data received by Wi-Fi device with SSID %s: %s", self.ssid, data)
        self.motherboard.receive_from_device(self.port, data)

def get_router_ip():
    
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
        s.connect(("8.8.8.8", 80))
        return s.getsockname()[0]

def main():
    monitor = Monitor("1920x1080", "60Hz")
    motherboard = Motherboard()
    router = Router()
    ethernet = Ethernet("XXXXXXXX")
    wifi = WiFi("My WiFi", "mypassword")

    motherboard.connect(router, "LAN")
    motherboard.connect(ethernet, "Ethernet")
    motherboard.connect(wifi, "Wi-Fi")
